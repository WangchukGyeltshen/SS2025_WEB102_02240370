const path = require('path');
const vm = require('vm');
const fs = require("fs");

let log = require('nodeutils').log.create('expressd:scope');

function funcinfos(f){
    let fs = (''+f).trim();
    let pre = fs.match(/(.*?)\{/i)[1];
    let sp = pre.length+1; //fs.indexOf('{');
    let ep = fs.lastIndexOf('}');
    let args = pre.match(/.*?\((.*?)\)/i)[1].replace(/\s/ig,'').split(/\,\s*?/g);
    let b = fs.substr(sp, ep-sp);
    return {
        args: args,
        name: pre.match( /(.*?)\(/i )[1].trim().split(/\s/i).pop(),
        body: b,
        buildFunction: function(){
            let fargs = args.splice(0);
            fargs.push(b);
            return Function.apply( null, fargs );
        }
    }
}


function Scope(){

    this.sandbox = {};
    let ctx = new vm.createContext(this.sandbox);

    this.prepare = function(fnc){
        return new ScopeFunction(this, ctx, fnc)
    };

    this.exec = function(fnc, ext){
        let f = this.prepare(fnc);
        return f.exec(ext);
    };

    this.addFromDir = function(dirPath){
        if(fs.existsSync(dirPath)){
            let rx = /(.+)\.(js)/i;
            let filepaths = fs.readdirSync(dirPath);
            filepaths.forEach(
                fnme => {
                    let fpath = path.join(dirPath, fnme);
                    let stat = fs.statSync(fpath);
                    if(stat.isFile()){
                        let m = fnme.match(rx);
                        if(m){
                            let fnc = ''+fs.readFileSync(fpath);
//                            fnc = fnc.replace(/\n/gi, '');
                            let sf = funcinfos(fnc);
                            sf.name = sf.name || m[1].split(/\s*/).pop();
                            this.sandbox[sf.name] = sf.buildFunction();
                        }
                    }
                }
            );
        }
    };
}

function ScopeFunction(scope, ctx, func){
    let info = funcinfos(func);
    let script = new vm.Script(info.body, {filename:info.name||'expressdscope', displayErrors:true });

    this.exec = function(extend){
        if(extend){
            for(let pn in extend){
                scope.sandbox[pn] = extend[pn];
            }
        }
        return script.runInContext(ctx);
    };
    this.args = info.args;
    this.name = info.name;
    this.body = info.body;
    this.function = func;
}

let scopes={};

let GlobalScope = new Scope();

module.exports = {
    globaal: GlobalScope,
    create: function(scopename){
        if(!scopename){
            return new Scope();
        }
        let sc = scopes[scopename];
        if(!sc){
            sc = new Scope();
            scopes[scopename] = sc;
        }
        return sc;
    },
    remove: function(scopename){ return scopes[scopename]=undefined },
    get: function(scopename){ return scopes[scopename] }
};

