// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  name      String?
  bio       String?
  avatar    String?
  videos    Video[]
  comments  Comment[]
  videoLikes VideoLike[]
  commentLikes CommentLike[]
  followedBy Follow[] @relation("FollowedBy")
  following Follow[] @relation("Following")
  createdAt DateTime @default(now())
}

model Video {
  id                  Int         @id @default(autoincrement())
  userId              Int         @map("user_id")
  caption             String?
  videoUrl            String      @map("video_url")
  thumbnailUrl        String?     @map("thumbnail_url")
  audioName           String?     @map("audio_name")
  videoStoragePath    String?     @map("video_storage_path")
  thumbnailStoragePath String?    @map("thumbnail_storage_path")
  views               Int         @default(0)
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @default(now()) @updatedAt @map("updated_at")
  comments            Comment[]
  likes               VideoLike[]
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("videos")
}

model Comment {
  id        Int         @id @default(autoincrement())
  userId    Int
  videoId   Int
  user      User        @relation(fields: [userId], references: [id])
  video     Video       @relation(fields: [videoId], references: [id])
  content   String
  commentLikes CommentLike[]
  createdAt DateTime    @default(now())
}

model VideoLike {
  id      Int    @id @default(autoincrement())
  userId  Int
  videoId Int
  user    User   @relation(fields: [userId], references: [id])
  video   Video  @relation(fields: [videoId], references: [id])
  @@unique([userId, videoId])
}

model CommentLike {
  id        Int    @id @default(autoincrement())
  userId    Int
  commentId Int
  user      User   @relation(fields: [userId], references: [id])
  comment   Comment @relation(fields: [commentId], references: [id])
  @@unique([userId, commentId])
}

model Follow {
  id          Int  @id @default(autoincrement())
  followerId  Int
  followingId Int
  follower    User @relation("Following", fields: [followerId], references: [id])
  following   User @relation("FollowedBy", fields: [followingId], references: [id])
  @@unique([followerId, followingId])
}
